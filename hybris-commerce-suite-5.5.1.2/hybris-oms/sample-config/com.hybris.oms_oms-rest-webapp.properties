##################### JDBC #####################################################
#
# Fully qualified name of the JDBC driver class used to access the database
#
dataSource.driverClass=com.mysql.jdbc.Driver
#
# JDBC connection URL
#
dataSource.jdbcUrl=jdbc:mysql://localhost:3306/omsext?useConfigs=maxPerformance&characterEncoding=utf8&sessionVariables=storage_engine=InnoDB&zeroDateTimeBehavior=convertToNull
# Username to use for connection
#
dataSource.username=root
#
# Password to use for connection
#
dataSource.password=password
#
# Database type to be used by Activiti
# Supported values: h2, mysql, oracle, mssql
#
oms.activiti.databaseType=mysql


##################### MongoDB ##################################################
#
# MongoDB connection URL
# See: http://docs.mongodb.org/manual/reference/connection-string/
# Replica Set seed servers URL example: mongodb://localhost:27017,localhost:27018,localhost:27019
#
persistence.engine.mongodb.url=mongodb://localhost:27017
#
# Database name
#
persistence.engine.mongodb.databaseName=omsrest

##################### CIS ##################################################

#
# Still needed until we fully remove service provider
#
serviceprovider.implementation=properties

#
# Define CIS endpoints
#
shipping.client.endpoint.uri=http://localhost:8080/shippingService/shipping/shippingService
geolocation.client.endpoint.uri=http://localhost:8080/geolocationService/geolocation/geolocationService
payment.client.endpoint.uri=http://localhost:8080/paymentService/psp/paymentService
tax.client.endpoint.uri=http://localhost:8080/taxService/tax/taxService

#
# Define whether to use cis client mocks (true/false)
#
# Mock CIS Payment Calls
cis.client.payment.mock=true
# Mock CIS Geolocation Calls
cis.client.geolocation.mock=true
# Mock CIS Shipping Calls
cis.client.shipping.mock=true
# Mock CIS Tax Calls
cis.client.tax.mock=true



## KERNEL PROPERTIES
# Defines how system should be initialized
#     Possible values:
#       - ignore      : (recommended) No check during startup. Use init-app to initialize/update system
#       - create      : Will initialize system if not initialized or fail when not up to date.
#       - update      : Will initialize system if not initialized or update when not up to date.
#       - create-drop : Will drop schema (and ALL DATA) and then initialize system from scratch again.
kernel.autoInitMode=ignore
