#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} DATA SOURCE PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 

${symbol_pound}${symbol_pound} hsqldb
${symbol_pound} Fully qualified name of the JDBC driver class used to access the database
dataSource.driverClass=org.hsqldb.jdbcDriver
${symbol_pound} JDBC connection URL
dataSource.jdbcUrl=jdbc:hsqldb:mem:testDB
${symbol_pound} Username to use for connection
dataSource.username=sa
${symbol_pound} Password to use for connection
dataSource.password=

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} MONGODB PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Mongo database name
persistence.engine.mongodb.databaseName=oms-int-ext

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} KERNEL PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Name of tenant which will be initialized during startup with property kernel.autoInitMode "create" or "create-drop"
${symbol_pound} Tenant name for single tenant configuration.
kernel.defaultTenant=single
${symbol_pound} Enables/Disables one tenant configuration (true/false), for single tenant property kernel.defaultTenant is required (true/false)
kernel.singleTenantMode=true

${symbol_pound} Defines how system should be initialized
${symbol_pound}     Possible values:
${symbol_pound}       - ignore      : (recommended) No check during startup. Use init-app to initialize/update system
${symbol_pound}       - create      : Will initialize system if not initialized or fail when not up to date.
${symbol_pound}       - update      : Will initialize system if not initialized or update when not up to date.
${symbol_pound}       - create-drop : Will drop schema (and ALL DATA) and then initialize system from scratch again.
kernel.autoInitMode=create-drop

${symbol_pound} Enables/disables automatic flush invocation before query (true/false)
kernel.flushBeforeQuery=false

${symbol_pound} Enables/Disables kernel cache (true/false)
kernel.cacheEnabled=false

${symbol_pound} Name of bean which provides default SequenceService implementation
kernel.sequence.provider=jdbcPersistenceEngine
${symbol_pound} Size of sequence cached numbers
kernel.sequence.cacheSize=500
${symbol_pound} Number of attempts to get new number from sequence
kernel.sequence.maxAttempts=3

${symbol_pound} Enables/disables initial scheduleable aggregations calculation after start (true/false)
kernel.aggregation.initialAggregation=true

${symbol_pound} JGroups channel configuration
${symbol_pound}     Possible values:
${symbol_pound}          disable, skip   - skips configuration
${symbol_pound}          enable, default - default configuration
${symbol_pound}          <configuration string> - see jgroups documentation
kernel.events.cluster.jgroups.channel=disable

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} OMS PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 

${symbol_pound} Database type to be used by Activiti
${symbol_pound}     Supported values: h2, mysql, oracle, mssql
oms.activiti.databaseType=h2

${symbol_pound} default tenant to be used by the rest client
oms.defaultTenant=single

${symbol_pound} OMS rest path root context (as configured for extension)
oms.context=${parentArtifactId}-web
${symbol_pound} rest relative path
oms.rootResourcePath=webresources
${symbol_pound} OMS web server host
oms.host=localhost
${symbol_pound} OMS web server port
oms.port=8080

${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound} PROVIDER PROPERTIES ${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 

hybris.server.url=http://localhost:8080

${symbol_pound} Api key for creating signature
hybris.security.apiKey=myKey

${symbol_pound}${symbol_pound} START ${symbol_pound}${symbol_pound}
${symbol_pound}${symbol_pound} Specific service provider configuration for the tenant "single"

${symbol_pound} Name of the cis service which will manage the geolocation
serviceprovider.configuration.single.GeolocationService.Choose_your_Provider=cisGeolocationHybris
${symbol_pound} Define if the specific tenant "single" is subscribed to geolocation service (true/false)
serviceprovider.configuration.single.GeolocationService.subscribed=true
${symbol_pound} Name of the cis service which will manage the tax
serviceprovider.configuration.single.TaxService.Choose_your_Provider=cisTaxAvalara
${symbol_pound} Define if the specific tenant "single" is subscribed to tax service (true/false)
serviceprovider.configuration.single.TaxService.subscribed=true
${symbol_pound} Name of the cis service which will manage the payment
serviceprovider.configuration.single.PaymentService.Choose_your_Provider=cisPaymentCybersource
${symbol_pound} Define if the specific tenant "single" is subscribed to payment service (true/false)
serviceprovider.configuration.single.PaymentService.subscribed=true
${symbol_pound} Name of the cis service which will manage the shipping
serviceprovider.configuration.single.ShippingService.Choose_your_Provider=cisShippingCanadapost
${symbol_pound} Define if the specific tenant "single" is subscribed to shipping service (true/false)
serviceprovider.configuration.single.ShippingService.subscribed=true
${symbol_pound} Define if the specific tenant "single" is subscribed to cis geolocation service (true/false)
serviceprovider.configuration.single.cisGeolocationHybris.subscribed=true
${symbol_pound} Define if the specific tenant "single" is subscribed to cis tax Avalara service (true/false)
serviceprovider.configuration.single.cisTaxAvalara.subscribed=true
${symbol_pound} Define if the specific tenant "single" is subscribed to cis payment Cybersource service (true/false)
serviceprovider.configuration.single.cisPaymentCybersource.subscribed=true
${symbol_pound} Define if the specific tenant "single" is subscribed to cis Shipping Canada post service (true/false)
serviceprovider.configuration.single.cisShippingCanadapost.subscribed=true

${symbol_pound}${symbol_pound} END ${symbol_pound}${symbol_pound}
